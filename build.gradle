import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'jacoco'
    id 'java'
    id 'org.springframework.boot' version '3.3.7'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.9.0'
}

def packageName = "com.pichincha.sp.async.transaction.ingestor"

springBoot {
    mainClass = "${packageName}.OptimusMainApplication"
}

group = "com.pichincha.sp"
version = "1.0.1"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://pkgs.dev.azure.com/BancoPichinchaEC/0f20bf47-c965-46fe-8bd4-91df57fbb2e7/_packaging/Framework/maven/v1"
        name "BancoPichinchaEC"
        credentials {
            username System.getenv("ARTIFACT_USERNAME")
            password System.getenv("ARTIFACT_TOKEN")
        }
    }
    maven {
        url 'https://pkgs.dev.azure.com/BancoPichinchaEC/tmp-tarjetasdebito/_packaging/tdd-libs/maven/v1'
        name 'tdd-libs'
        credentials {
            username System.getenv("ARTIFACT_USERNAME")
            password System.getenv("ARTIFACT_TOKEN")
        }
    }
    maven {
        url "https://packages.confluent.io/maven"
    }
}

ext {
    mapstructVersion = "1.5.3.Final"
    lombokVersion = "1.18.30"
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Base dependencies
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation('org.springframework.boot:spring-boot-starter-webflux') {
        exclude module: 'slf4j-simple'
    }

    // SpringDoc versión 1.7.0 compatible con requiredMode
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.7.0'

    // Librerías adicionales
    implementation 'com.pichincha:optimus-generateunittest-webflux:1.0.5'
    implementation 'commons-codec:commons-codec:1.16.0'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'io.confluent:kafka-avro-serializer:7.6.0'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Optimus
    compileOnly group: "org.projectlombok", name: "lombok", version: ""
    implementation group: "io.r2dbc", name: "r2dbc-h2", version: "1.0.0.RELEASE"

    // Test
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.xmlunit:xmlunit-core:2.10.0"
}

tasks.register('buildSpringServer', GenerateTask) {
    generatorName = "spring"
    templateDir = "$rootDir/src/main/resources/openapi-templates"
    inputSpec = "$rootDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "${packageName}.infrastructure.input.adapter.rest"
    modelPackage = "${packageName}.infrastructure.input.adapter.rest.models"
    library = "spring-boot"
    configOptions = [
            skipDefaultInterface                    : "true",
            useSpringBoot3                          : "true",
            useJakartaEe                            : "true",
            serializableModel                       : "true",
            dateLibrary                             : "java8",
            openApiNullable                         : "false",
            reactive                                : "true",
            apiFirst                                : "false",
            delegatePattern                         : "false",
            configPackage                           : "${packageName}.config",
            sourceFolder                            : "src/main/java",
            basePackage                             : "${packageName}",
            disallowAdditionalPropertiesIfNotPresent: "true",
            interfaceOnly                           : "true"
    ]
}

tasks.register('optimusCreateUnitTest', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.pichincha.test.core.ProcessMain"
}

compileJava {
    dependsOn buildSpringServer
    options.compilerArgs += [
            "-Amapstruct.suppressGeneratorTimestamp=true",
            "-Amapstruct.suppressGeneratorVersionInfoComment=true",
            "-Amapstruct.verbose=true",
            "-Amapstruct.defaultComponentModel=spring"
    ]
}

sourceSets.main.java.srcDirs = ["$buildDir/generated/src/main/java", "src/main/java"]

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        xml.destination file("$buildDir/jacoco/test.xml")
        html.destination file("$buildDir/jacoco/index.html")
        html.required = true
        csv.required = true
    }
}

configurations.all {
    resolutionStrategy {
        force 'org.springdoc:springdoc-openapi-webflux-ui:1.7.0'
        force 'org.springdoc:springdoc-openapi-common:1.7.0'
        force 'org.springdoc:springdoc-openapi-core:1.7.0'
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.springdoc' && details.requested.name.startsWith('springdoc-openapi-starter')) {
                details.useVersion '1.7.0'
            }
        }
    }
}